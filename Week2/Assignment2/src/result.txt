See the Assessment Guide for information on how to interpret this report.

Assessment Summary

Compilation:  PASSED
Style:        PASSED
Findbugs:     No potential bugs found.
API:          PASSED

Correctness:  28/37 tests passed
Memory:       51/53 tests passed
Timing:       55/62 tests passed

Aggregate score: 80.99% [Correctness: 65%, Memory: 10%, Timing: 25%, Style: 0%]

Assessment Details

The following files were submitted:
----------------------------------
total 20K
-rw-r--r-- 1 4.0K Nov 15 05:15 Deque.java
-rw-r--r-- 1 4.4K Nov 15 05:15 RandomizedQueue.java
-rw-r--r-- 1  618 Nov 15 05:15 Subset.java
-rw-r--r-- 1 3.0K Nov 15 05:15 studentSubmission.zip


********************************************************************************
*          COMPILING                                                           *
********************************************************************************


% javac Deque.java
*-----------------------------------------------------------

================================================================

% javac RandomizedQueue.java
*-----------------------------------------------------------
RandomizedQueue.java:11: warning: [unchecked] unchecked cast
        s = (Item[]) new Object[1];
                     ^
  required: Item[]
  found:    Object[]
  where Item is a type-variable:
    Item extends Object declared in class RandomizedQueue
RandomizedQueue.java:18: warning: [unchecked] unchecked cast
        Item[] newArray = (Item[]) new Object[l];
                                   ^
  required: Item[]
  found:    Object[]
  where Item is a type-variable:
    Item extends Object declared in class RandomizedQueue
RandomizedQueue.java:88: warning: [unchecked] unchecked cast
        Item[] newArray = (Item[]) new Object[n];
                                   ^
  required: Item[]
  found:    Object[]
  where Item is a type-variable:
    Item extends Object declared in class RandomizedQueue
3 warnings

================================================================

% javac Subset.java
*-----------------------------------------------------------

================================================================



% checkstyle *.java
*-----------------------------------------------------------

================================================================


% findbugs *.class
*-----------------------------------------------------------

================================================================


Testing the APIs of your programs.
*-----------------------------------------------------------
Deque:

RandomizedQueue:

Subset:

================================================================


******************************************************************************
*          CORRECTNESS
******************************************************************************

Testing methods in Deque
*-----------------------------------------------------------
Running 16 total tests.

Tests 1-6 make random calls to addFirst(), addLast(), removeFirst(),
removeLast(), isEmpty(), and size(). The probabilities of each
operation are (p1, p2, p3, p4, p5, p6), respectively.

Test 1: Calls to addFirst(), addLast(), and size()
  *    5 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
  *   50 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
  *  500 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
  * 1000 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
==> passed

Test 2: Calls to addFirst(), removeFirst(), and isEmpty()
  *    5 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  *   50 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  *  500 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  * 1000 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  *    5 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
  *   50 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
  *  500 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
  * 1000 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
==> passed

Test 3: Calls to addFirst(), removeLast(), and isEmpty()
  *    5 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
  *   50 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
  *  500 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
  * 1000 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
  *    5 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
  *   50 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
  *  500 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
  * 1000 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
==> passed

Test 4: Calls to addLast(), removeLast(), and isEmpty()
  *    5 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  *   50 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  *  500 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  * 1000 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  *    5 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
  *   50 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
  *  500 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
  * 1000 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
==> passed

Test 5: Calls to addLast(), removeFirst(), and isEmpty()
  *    5 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  *   50 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  *  500 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  * 1000 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  *    5 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
  *   50 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
  *  500 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
  * 1000 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
==> passed

Test 6: Calls to addFirst(), addLast(), removeFirst(),
        removeLast(), isEmpty(), and size().
  *    5 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
  *   50 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
  *  500 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
  * 1000 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
  *    5 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
  *   50 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
    - failed on operation 21 of 50
    - student   removeLast() returned 17
    - reference removeLast() returned 20

  *  500 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
    - failed on operation 39 of 500
    - student   removeLast() returned 12
    - reference removeLast() returned 36

  * 1000 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
    - failed on operation 32 of 1000
    - student   removeFirst() returned 16
    - reference removeFirst() returned 31

==> FAILED

Test 7: Removing from an empty deque
  *  removeFirst()
  *  removeLast()
==> passed

Test 8: Create multiple deque objects at the same time
==> passed

Test 9: Check iterator() after calls only to addFirst()
==> passed

Test 10: Check iterator() after intermixed calls to addFirst(), addLast(),
         removeFirst(), and removeLast()
     -  student   length = 2
     -  reference length = 1
     -  iterator failed after applying operation 15

==> FAILED

Test 11: Create two nested iterators to same deque
  *  N = 10
  *  N = 1000
==> passed

Test 12: Create two parallel iterators to same deque
  *  N = 10
  *  N = 1000
==> passed

Test 13: Create Deque objects of different parameterized types
==> passed

Test 14: Check that addFirst() and addLast() each throw a NullPointerException
         when inserting null items
==> passed

Test 15: Check that remove() and next() throw the specified exceptions in iterator()
==> passed

Test 16: Check iterator() when Deque is empty
==> passed


Total: 14/16 tests passed!


================================================================

Testing methods in RandomizedQueue
*-----------------------------------------------------------
Running 18 total tests.

Tests 1-4 make random calls to enqueue(), dequeue(), sample(),
isEmpty(), and size(). The probabilities of each operation are
(p1, p2, p3, p4, p5), respectively.

Test 1: Calls to enqueue() and size().
  *     5 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
  *    50 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
  *   500 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
  *  1000 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
==> passed

Test 2: Calls to enqueue() and dequeue().
  *     5 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  *    50 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  *   500 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  *  1000 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  *     5 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
  *    50 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
  *   500 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
  *  1000 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
==> passed

Test 3: Calls to enqueue(), sample(), and size().
  *     5 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  *    50 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  *   500 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  *  1000 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  *     5 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
  *    50 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
  *   500 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
  *  1000 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
==> passed

Test 4: Calls to enqueue(), dequeue(), sample(), isEmpty(), and size().
  *     5 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
  *    50 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
  *   500 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
  *  1000 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
  *     5 random calls (0.1, 0.1, 0.6, 0.1, 0.1)
  *    50 random calls (0.1, 0.1, 0.6, 0.1, 0.1)
  *   500 random calls (0.1, 0.1, 0.6, 0.1, 0.1)
  *  1000 random calls (0.1, 0.1, 0.6, 0.1, 0.1)
==> passed

Test 5: dequeue() and sample() from an empty randomized queue
  *  dequeue()
  *  sample()
==> passed

Test 6: Create multiple randomized queue objects at the same time
==> passed

Test 7: Check that iterator() returns correct items after a sequence of
        enqueue() operations
==> passed

Test 8: Check that iterator() returns correct items after sequence of enqueue()
        and dequeue() operations
==> passed

Test 9: Create two nested iterators over same randomized queue
  *  N = 10
     -  two inner iterators return the same sequence of items;
     -  they should return the same set of items but in a
        different order
  *  N = 1000
     -  two inner iterators return the same sequence of items;
     -  they should return the same set of items but in a
        different order
==> FAILED

Test 10: Create two parallel iterators over same randomized queue
  *  N = 10
     -  two inner iterators return the same sequence of values;
     -  they should return the same set of values but in a
        different order
  *  N = 1000
     -  two inner iterators return the same sequence of values;
     -  they should return the same set of values but in a
        different order
==> FAILED

Test 11: Create two iterators over different randomized queues
==> passed

Test 12: Create RandomizedQueue objects of different parameterized types
==> passed

Test 13: Check randomness of sample() by enqueueing strings, repeatedly calling
         sample(), and counting the frequency of each value.
  *  Enqueue strings A to C and sampling 3000 times
  *  Enqueue strings A to E and sampling 5000 times
  *  Enqueue strings A to H and sampling 8000 times
  *  Enqueue strings A to J and sampling 10000 times
==> passed

Test 14: Check randomness of dequeue() by enqueueing items, repeatedly calling
         dequeue() until a specific enqueued string appears.
  *  Enqueue strings A to C and call dequeue() until C is dequeued; repeat 3000 times
                           1     2     3 
                       -----------------
    observed frequency     0     0  3000   3000
    expected frequency  1000  1000  1000   3000
    
    chi-square = 6000.00 (p-value = 0.000000, reject if p-value <= 0.0001)

     Note: a correct solution will fail this test by bad luck 1 time in 10000.

  *  Enqueue strings A to E and call dequeue() until C is dequeued; repeat 5000 times
                           1     2     3     4     5 
                       -----------------------------
    observed frequency     0     0  5000     0     0   5000
    expected frequency  1000  1000  1000  1000  1000   5000
    
    chi-square = 20000.00 (p-value = 0.000000, reject if p-value <= 0.0001)

     Note: a correct solution will fail this test by bad luck 1 time in 10000.

  *  Enqueue strings A to H and call dequeue() until E is dequeued; repeat 8000 times
                           1     2     3     4     5     6     7     8 
                       -----------------------------------------------
    observed frequency     0     0     0     0  8000     0     0     0   8000
    expected frequency  1000  1000  1000  1000  1000  1000  1000  1000   8000
    
    chi-square = 56000.00 (p-value = 0.000000, reject if p-value <= 0.0001)

     Note: a correct solution will fail this test by bad luck 1 time in 10000.

  *  Enqueue strings A to J and call dequeue() until C is dequeued; repeat 10000 times
                           1     2     3     4     5     6     7     8     9    10 
                       -----------------------------------------------------------
    observed frequency     0     0 10000     0     0     0     0     0     0     0   10000
    expected frequency  1000  1000  1000  1000  1000  1000  1000  1000  1000  1000   10000
    
    chi-square = 90000.00 (p-value = 0.000000, reject if p-value <= 0.0001)

     Note: a correct solution will fail this test by bad luck 1 time in 10000.

==> FAILED

Test 15: Check randomness of iterator() by enqueueing strings, getting an iterator()
         and repeatedly calling next() until a specific enqueued string appears.
  *  Enqueue strings A to C, create iterator(), and call next() until C is returned;
     Repeat 3000 times
                           1     2     3 
                       -----------------
    observed frequency     0     0  3000   3000
    expected frequency  1000  1000  1000   3000
    
    chi-square = 6000.00 (p-value = 0.000000, reject if p-value <= 0.0001)

     Note: a correct solution will fail this test by bad luck 1 time in 10000.

  *  Enqueue strings A to E, create iterator(), and call next() until A is returned;
     Repeat 5000 times
                           1     2     3     4     5 
                       -----------------------------
    observed frequency  5000     0     0     0     0   5000
    expected frequency  1000  1000  1000  1000  1000   5000
    
    chi-square = 20000.00 (p-value = 0.000000, reject if p-value <= 0.0001)

     Note: a correct solution will fail this test by bad luck 1 time in 10000.

  *  Enqueue strings A to H, create iterator(), and call next() until B is returned;
     Repeat 8000 times
                           1     2     3     4     5     6     7     8 
                       -----------------------------------------------
    observed frequency     0  8000     0     0     0     0     0     0   8000
    expected frequency  1000  1000  1000  1000  1000  1000  1000  1000   8000
    
    chi-square = 56000.00 (p-value = 0.000000, reject if p-value <= 0.0001)

     Note: a correct solution will fail this test by bad luck 1 time in 10000.

  *  Enqueue strings A to J, create iterator(), and call next() until D is returned;
     Repeat 10000 times
                           1     2     3     4     5     6     7     8     9    10 
                       -----------------------------------------------------------
    observed frequency     0     0     0 10000     0     0     0     0     0     0   10000
    expected frequency  1000  1000  1000  1000  1000  1000  1000  1000  1000  1000   10000
    
    chi-square = 90000.00 (p-value = 0.000000, reject if p-value <= 0.0001)

     Note: a correct solution will fail this test by bad luck 1 time in 10000.

==> FAILED

Test 16: Check that NullPointerException is thrown when inserting null items
==> passed

Test 17: Check that remove() and next() throw the specified exceptions in iterator()
     - java.util.NoSuchElementException not thrown for next()
==> FAILED

Test 18: Check iterator() when RandomizedQueue is empty
==> passed


Total: 13/18 tests passed!


================================================================

******************************************************************************
*          correctness (substituting reference RandomizedQueue.java and Deque.java)
******************************************************************************

Testing methods in Subset
*-----------------------------------------------------------
Tests 1-3 call the main() function directly, resetting standard input
before each call.

Running 3 total tests.

Test 1: assignment inputs

% echo "A B C D E F G H I" | java Subset 3
[student solution]
E
B
G

% echo "A B C D E F G H I" | java Subset 3
[student solution]
H
H
E

Error: Output has too many occurrences of: H
% echo "AA BB BB BB BB BB CC CC " | java Subset 8
[student solution]
CC
BB
BB
BB
CC
BB
BB
BB

Error: Output has too many occurrences of: BB
==> FAILED

Test 2: various inputs

% echo "A B C D E F G H I" | java Subset 1
[student solution]
H

% echo "A B C D E F G H I" | java Subset 5
[student solution]
F
B
A
F
B

Error: Output has too many occurrences of: F
% echo "A B C D E F G H I" | java Subset 5
[student solution]
B
C
D
H
A

% echo "A B C D E F G H I" | java Subset 9
[student solution]
D
D
E
G
G
E
A
E
A

Error: Output has too many occurrences of: D
% echo "A B C D E F G H I" | java Subset 0
[student solution]

% echo "it was the best of times it was the worst of times" | java Subset 10
[student solution]
times
best
times
it
of
it
it
was
worst
was

Error: Output has too many occurrences of: it
% echo "It was the best of times, it was the worst of times, it was ..." | java Subset 10
[student solution]
faint."
and
shifted
been
drunk
earth
and
Jerry.
sentence,
came

% echo "It was the best of times, it was the worst of times, it was ..." | java Subset 20
[student solution]
of
while,
more
or
by
"Every
had
the
Every
it
the
"Now,
the
as
and
in
first
he
and
time

% echo "AA BB BB BB BB BB CC CC " | java Subset 7
[student solution]
CC
BB
BB
BB
CC
AA
CC

Error: Output has too many occurrences of: CC
==> FAILED

Test 3: check that subsets are uniformly random
  * 1000 subsets of size 1 from subset10.txt
  * 250 subsets of size 4 from subset10.txt
  * 600 subsets of size 1 from subset6.txt
  * 300 subsets of size 2 from subset6.txt
  * 800 subsets of size 1 from subset8.txt
  * 160 subsets of size 5 from subset8.txt
  * 1000 subsets of size 1 from mediumTale.txt
==> passed

Total: 1/3 tests passed!


================================================================

******************************************************************************
*          MEMORY
******************************************************************************

Computing memory of Subset
*-----------------------------------------------------------
Running 2 total tests.

Test 1: Check that only one Deque or RandomizedQueue object is created
  * filename = subset9.txt, n = 9, k = 1
  * filename = subset9.txt, n = 9, k = 2
  * filename = subset9.txt, n = 9, k = 4
  * filename = tinyTale.txt, n = 12, k = 10
  * filename = tale.txt, n = 138653, k = 50
==> passed

Test 2: Check that the maximum size of any Deque or RandomizedQueue object
        created is >=k and <= n
  * filename = subset9.txt, n = 9, k = 1
  * filename = subset9.txt, n = 9, k = 2
  * filename = subset9.txt, n = 9, k = 4
  * filename = tinyTale.txt, n = 12, k = 10
  * filename = tale.txt, n = 138653, k = 5
  * filename = tale.txt, n = 138653, k = 50
  * filename = tale.txt, n = 138653, k = 500
  * filename = tale.txt, n = 138653, k = 5000
  * filename = tale.txt, n = 138653, k = 50000
==> passed

Test 3 (bonus): Check that maximum size of any or Deque or RandomizedQueue object
                created is equal to k
  * filename = tale.txt, N = 138653, k = 5
    - max size of RandomizedQueue object = 138653
  * filename = tale.txt, N = 138653, k = 50
    - max size of RandomizedQueue object = 138653
  * filename = tale.txt, N = 138653, k = 500
    - max size of RandomizedQueue object = 138653
  * filename = tale.txt, N = 138653, k = 5000
    - max size of RandomizedQueue object = 138653
  * filename = tale.txt, N = 138653, k = 50000
    - max size of RandomizedQueue object = 138653
==> FAILED

Total: 2/2 tests passed!

================================================================



******************************************************************************
*          MEMORY
******************************************************************************

Computing memory of Deque
*-----------------------------------------------------------
For tests 1-4, the maximum amount of memory allowed for a deque
containing N items is 48N + 192.

Running 28 total tests.

Test 1a-1e: Total memory usage after inserting N items,
            where N is a power of 2.

                 N        bytes
----------------------------------------------------------
=> passed        8          424         
=> passed       64         3112         
=> passed      256        12328         
=> passed     1024        49192         
=> passed     4096       196648         
==> 5/5 tests passed

Memory: 48.00 n + 40.00   (R^2 = 1.000)



Test 2a-2e: Total memory usage after inserting N+1 items,
            where N is a power of 2.

                 N        bytes
----------------------------------------------------------
=> passed        8          472         
=> passed       64         3160         
=> passed      256        12376         
=> passed     1024        49240         
=> passed     4096       196696         
==> 5/5 tests passed

Memory after adding N = 2^i + 1 items: 48.00 n + 40.00   (R^2 = 1.000)



Test 3a-3e: Total memory usage after inserting 2N+1 items
            and deleting N items, where N is a power of 2.

                 N        bytes
----------------------------------------------------------
=> passed        8          520         
=> passed       64         3208         
=> passed      256        12424         
=> passed     1024        49288         
=> passed     4096       196744         
==> 5/5 tests passed

Memory: 48.00 n + 88.00   (R^2 = 1.000)



Test 4a-4e: Total memory usage after inserting N items and then
            deleting all but one item, where N is a power of 2.
            (should not grow with N or be too large of a constant)

                 N        bytes
----------------------------------------------------------
=> passed        8          136         
=> passed       64          136         
=> passed      256          136         
=> passed     1024          136         
=> passed     4096          136         
==> 5/5 tests passed

Memory after adding N = 2^i items: 136.00   (R^2 = 1.000)



Test 5a-5e: Total memory usage of iterator after inserting N items.
            (should not grow with N or be too large of a constant)

                 N        bytes
----------------------------------------------------------
=> passed        8           32         
=> passed       64           32         
=> passed      256           32         
=> passed     1024           32         
=> passed     4096           32         
==> 5/5 tests passed

Memory of iterator after adding N = 2^i items: 32.00   (R^2 = 1.000)



Test 6a: Insert N strings; delete them one at a time, checking for
         loitering after each deletion. The probabilities of addFirst()
         and addLast() are (p1, p2), respectively. The probabilities of
         removeFirst() and removeLast() are (q1, q2), respectively
  * 100 random insertions (1.0, 0.0) and 100 random deletions (1.0, 0.0)
    - loitering observed during 99 of 100 deletions
    - maximum number of loitered objects at one time = 1
  * 100 random insertions (1.0, 0.0) and 100 random deletions (0.0, 1.0)
    - loitering observed during 99 of 100 deletions
    - maximum number of loitered objects at one time = 1
  * 100 random insertions (0.0, 1.0) and 100 random deletions (1.0, 0.0)
    - loitering observed during 99 of 100 deletions
    - maximum number of loitered objects at one time = 1
  * 100 random insertions (0.0, 1.0) and 100 random deletions (0.0, 1.0)
    - loitering observed during 99 of 100 deletions
    - maximum number of loitered objects at one time = 1
  * 100 random insertions (0.5, 0.5) and 100 random deletions (0.5, 0.5)
    - loitering observed during 100 of 100 deletions
    - maximum number of loitered objects at one time = 2
==> FAILED

Test 6b: Perform random operations, checking for loitering after
         each operation. The probabilities of addFirst(), addLast(),
         removeFirst(), and removeLast() are (p1, p2, p3, p4),
         respectively.
  * 100 random operations (0.8, 0.0, 0.2, 0.0)
    - loitering detected after operation 21 of 100
  * 100 random operations (0.8, 0.0, 0.0, 0.2)
    - loitering detected after operation 5 of 100
    - sequence of operations:
         deque.addFirst("BZWFJNJDBV")
         deque.addFirst("ZMOJGNYDEA")
         deque.addFirst("BHFZKPALED")
         deque.addFirst("CVNMULHPKQ")
         deque.removeLast()      ==> BZWFJNJDBV
    - loitered object(s):
      BZWFJNJDBV

  * 100 random operations (0.0, 0.8, 0.2, 0.0)
    - loitering detected after operation 6 of 100
    - sequence of operations:
         deque.addLast("FPVHAQZIDY")
         deque.addLast("DAXGMNLWGD")
         deque.addLast("SCOQGUSUEA")
         deque.addLast("SHNKNICDRL")
         deque.addLast("OJCGGUZZCH")
         deque.removeFirst()     ==> FPVHAQZIDY
    - loitered object(s):
      FPVHAQZIDY

  * 100 random operations (0.0, 0.8, 0.0, 0.2)
    - loitering detected after operation 11 of 100
    - sequence of operations:
         deque.addLast("KTYQPYFIAE")
         deque.addLast("TCQVCBXONS")
         deque.addLast("GOGIMMUMYF")
         deque.addLast("HQXJMREZOB")
         deque.addLast("ZIQKURFKKY")
         deque.addLast("VUBEUCSOJO")
         deque.addLast("BKCFDCZUOM")
         deque.addLast("CUYOTOREMF")
         deque.addLast("IUSEVZEOPI")
         deque.addLast("RZPVOTOBNV")
         deque.removeLast()      ==> RZPVOTOBNV
    - loitered object(s):
      RZPVOTOBNV

  * 100 random operations (0.4, 0.4, 0.1, 0.1)
    - loitering detected after operation 10 of 100
    - sequence of operations:
         deque.addLast("QQMIUSKUGX")
         deque.removeFirst()     ==> QQMIUSKUGX
         deque.addLast("TZWQINYVVI")
         deque.addLast("UFNVTYWLUX")
         deque.addFirst("NRNDPLCHQF")
         deque.addLast("ZQEORJRBOI")
         deque.addFirst("XNECTFPZVJ")
         deque.addFirst("QIEEAQVHNA")
         deque.addFirst("DWRSVSBVCJ")
         deque.removeFirst()     ==> DWRSVSBVCJ
    - loitered object(s):
      DWRSVSBVCJ

  * 100 random operations (0.2, 0.2, 0.3, 0.3)
    - loitering detected after operation 5 of 100
    - sequence of operations:
         deque.addFirst("SFQHITHBRV")
         deque.removeLast()      ==> SFQHITHBRV
         deque.addFirst("WGPNPSKSAE")
         deque.addFirst("JMZDPXQKWQ")
         deque.removeLast()      ==> WGPNPSKSAE
    - loitered object(s):
      WGPNPSKSAE

==> FAILED

Test 7: Worst-case constant memory allocated or deallocated
        per deque operation?
  * 128 random operations
  * 256 random operations
  * 512 random operations
==> passed

Total: 26/28 tests passed!

================================================================



Computing memory of RandomizedQueue
*-----------------------------------------------------------
For tests 1-4, the maximum amount of memory allowed for a
randomized queue containing N items is 48N + 192.

Running 23 total tests.

Test 1a-1d: Total memory usage after inserting N integers.

                 N        bytes
----------------------------------------------------------
=> passed       64          576         
=> passed      256         2112         
=> passed     1024         8256         
=> passed     4096        32832         
==> 4/4 tests passed


Memory: 8.00 n + 64.00   (R^2 = 1.000)



Test 2a-2d: Total memory usage after inserting N+1 items.

                 N        bytes
----------------------------------------------------------
=> passed       64         1088         
=> passed      256         4160         
=> passed     1024        16448         
=> passed     4096        65600         
==> 4/4 tests passed


Memory: 16.00 n + 48.00   (R^2 = 1.000)



Test 3a-3d: Total memory usage after inserting 2N+1 items, and
            then deleting N items.

                 N        bytes
----------------------------------------------------------
=> passed       64         2112         
=> passed      256         8256         
=> passed     1024        32832         
=> passed     4096       131136         
==> 4/4 tests passed


Memory: 32.00 n + 32.00   (R^2 = 1.000)



Test 4a-4d: Total memory usage after inserting N items, and
            then deleting all but one item.

                 N        bytes
----------------------------------------------------------
=> passed       64           80         
=> passed      256           80         
=> passed     1024           80         
=> passed     4096           80         
==> 4/4 tests passed


Memory: 80.00   (R^2 = 1.000)



Test 5a-5d: Total memory usage of iterator after inserting N items.

                 N        bytes
----------------------------------------------------------
=> passed       64           32         
=> passed      256           32         
=> passed     1024           32         
=> passed     4096           32         
==> 4/4 tests passed


Memory: 32.00   (R^2 = 1.000)



Test 6a: Insert 100 strings; delete them one at a time, checking
         for loitering after each deletion.
==> passed

Test 6b: Perform random operations, checking for loitering after
         each operation. The probabilities of enqueue(), dequeue(),
         and sample() are (p1, p2, p3), respectively.
  * 200 random operations (0.8, 0.2, 0.0)
  * 200 random operations (0.2, 0.8, 0.0)
  * 200 random operations (0.6, 0.2, 0.2)
  * 200 random operations (0.2, 0.4, 0.4)
==> passed

Test 7: Insert T items into queue; then iterate over queue and check
        that

...

Warning: the grading output was truncated due to excessive length.
Typically, this is becasue you have a method that has an unanticipated side effect
(such as printing to standard output or throwing an exception).