See the Assessment Guide for information on how to interpret this report.

Assessment Summary

Compilation:  PASSED
Style:        FAILED
Findbugs:     Potential bugs found.
API:          PASSED

Correctness:  35/41 tests passed
Memory:       1/1 tests passed
Timing:       30/41 tests passed

Aggregate score: 83.78% [Correctness: 65%, Memory: 10%, Timing: 25%, Style: 0%]

Assessment Details

The following files were submitted:
----------------------------------
total 28K
-rw-r--r-- 1 4.9K Nov 22 20:47 BruteCollinearPoints.java
-rw-r--r-- 1 4.1K Nov 22 20:47 FastCollinearPoints.java
-rw-r--r-- 1 4.6K Nov 22 20:47 Point.java
-rw-r--r-- 1 4.0K Nov 22 20:47 studentSubmission.zip


********************************************************************************
*          COMPILING                                                           *
********************************************************************************


% javac Point.java
*-----------------------------------------------------------

================================================================

% javac BruteCollinearPoints.java
*-----------------------------------------------------------

================================================================

% javac FastCollinearPoints.java
*-----------------------------------------------------------

================================================================



% checkstyle *.java
*-----------------------------------------------------------
[ERROR] FastCollinearPoints.java:44:69: '{' is not preceded with whitespace. [WhitespaceAround]
Checkstyle ends with 1 errors.

================================================================


% findbugs *.class
*-----------------------------------------------------------
H C RpC_REPEATED_CONDITIONAL_TEST RpC: Repeated conditional test in new BruteCollinearPoints(Point[])  At BruteCollinearPoints.java:[line 39]
M V EI_EXPOSE_REP EI: BruteCollinearPoints.segments() may expose internal representation by returning lines  At BruteCollinearPoints.java:[line 114]
M V EI_EXPOSE_REP EI: FastCollinearPoints.segments() may expose internal representation by returning lines  At FastCollinearPoints.java:[line 120]
Warnings generated: 3

================================================================


Testing the APIs of your programs.
*-----------------------------------------------------------
Point:

BruteCollinearPoints:

FastCollinearPoints:

================================================================


******************************************************************************
*          CORRECTNESS
******************************************************************************

Testing methods in Point
*-----------------------------------------------------------
Running 3 total tests.

Test 1: p.slopeTo(q)
  *  positive infinite slope, where p and q have coordinates in [0, 500)
  *  positive infinite slope, where p and q have coordinates in [0, 32768)
  *  negative infinite slope, where p and q have coordinates in [0, 500)
  *  negative infinite slope, where p and q have coordinates in [0, 32768)
  *  positive zero     slope, where p and q have coordinates in [0, 500)
  *  positive zero     slope, where p and q have coordinates in [0, 32768)
  *  symmetric  for random points p and q with coordinates in [0, 500)
  *  symmetric  for random points p and q with coordinates in [0, 32768)
  *  transitive for random points p, q, and r with coordinates in [0, 500)
  *  transitive for random points p, q, and r with coordinates in [0, 32768)
  *  slopeTo(), where p and q have coordinates in [0, 500)
  *  slopeTo(), where p and q have coordinates in [0, 32768)
  *  slopeTo(), where p and q have coordinates in [0, 10)
  *  throw a java.lang.NullPointerException if argument is null
==> passed

Test 2: p.compareTo(q)
  *  reflexive, where p and q have coordinates in [0, 500)
  *  reflexive, where p and q have coordinates in [0, 32768)
  *  antisymmetric, where p and q have coordinates in [0, 500)
  *  antisymmetric, where p and q have coordinates in [0, 32768)
  *  transitive, where p, q, and r have coordinates in [0, 500)
  *  transitive, where p, q, and r have coordinates in [0, 32768)
  *  sign of compareTo(), where p and q have coordinates in [0, 500)
  *  sign of compareTo(), where p and q have coordinates in [0, 32768)
  *  sign of compareTo(), where p and q have coordinates in [0, 10)
  *  throw java.lang.NullPointerException exception if argument is null
==> passed

Test 3: p.slopeOrder().compare(q, r)
  *  reflexive, where p and q have coordinates in [0, 500)
  *  reflexive, where p and q have coordinates in [0, 32768)
  *  antisymmetric, where p, q, and r have coordinates in [0, 500)
  *  antisymmetric, where p, q, and r have coordinates in [0, 32768)
  *  transitive, where p, q, r, and s have coordinates in [0, 500)
  *  transitive, where p, q, r, and s have coordinates in [0, 32768)
  *  sign of compare(), where p, q, and r have coordinates in [0, 500)
  *  sign of compare(), where p, q, and r have coordinates in [0, 32768)
  *  sign of compare(), where p, q, and r have coordinates in [0, 10)
  *  throw java.lang.NullPointerException if either argument is null
==> passed


Total: 3/3 tests passed!


================================================================

******************************************************************************
*          correctness (using reference Point.java and LineSegment.java)
******************************************************************************

Testing methods in BruteCollinearPoints
*-----------------------------------------------------------
Running 17 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - no 5 (or more) points are collinear
  - all x- and y-coordinates between 0 and 32,767

Test 1: Points from a file
  *  filename = input8.txt
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
==> passed

Test 2a: Points from a file with horizontal line segments
  *  filename = horizontal5.txt
  *  filename = horizontal25.txt
==> passed

Test 2b: Random horizontal line segments
  *   1 random horizontal line segment
  *   5 random horizontal line segments
  *  10 random horizontal line segments
  *  15 random horizontal line segments
==> passed

Test 3a: Points from a file with vertical line segments
  *  filename = vertical5.txt
  *  filename = vertical25.txt
==> passed

Test 3b: Random vertical line segments
  *   1 random vertical line segment
  *   5 random vertical line segments
  *  10 random vertical line segments
  *  15 random vertical line segments
==> passed

Test 4a: Points from a file with no line segments
  *  filename = random23.txt
  *  filename = random38.txt
==> passed

Test 4b: Random points with no line segments
  *   5 random points
  *  10 random points
  *  20 random points
  *  50 random points
==> passed

Test 5: Points from a file with fewer than 4 points
  *  filename = input1.txt
  *  filename = input2.txt
  *  filename = input3.txt
==> passed

Test 6: Check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
==> passed

Test 7: Check for fragile dependence on return value of toString()
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
==> passed

Test 8: Random line segments, none vertical or horizontal
  *   1 random line segment
  *   5 random line segments
  *  10 random line segments
  *  15 random line segments
==> passed

Test 9: Random line segments
  *   1 random line segment
  *   5 random line segments
  *  10 random line segments
  *  15 random line segments
==> passed

Test 10: Check that data type is immutable by testing whether each method
        returns the same value, regardless of any intervening operations
  *  input8.txt
     -  failed after 9 operations involving BruteCollinearPoints
     -  first and last call to segments() returned different arrays
     -  sequence of operations was:
          BruteCollinearPoints collinear = new BruteCollinearPoints(points);
          collinear.segments()
          collinear.numberOfSegments() -> 2
          collinear.numberOfSegments() -> 2
          mutate points[] array that was passed to constructor
          mutate array returned by last call to segments()
          collinear.numberOfSegments() -> 2
          collinear.numberOfSegments() -> 2
          collinear.segments()
     -  failed on trial 1 of 100

  *  equidistant.txt
     -  failed after 10 operations involving BruteCollinearPoints
     -  first and last call to segments() returned different arrays
     -  sequence of operations was:
          BruteCollinearPoints collinear = new BruteCollinearPoints(points);
          collinear.segments()
          mutate points[] array that was passed to constructor
          mutate points[] array that was passed to constructor
          collinear.numberOfSegments() -> 4
          mutate points[] array that was passed to constructor
          collinear.segments()
          mutate array returned by last call to segments()
          collinear.numberOfSegments() -> 4
          collinear.segments()
     -  failed on trial 1 of 100

==> FAILED

Test 11: Check that data type does not mutate the constructor argument
  *  input8.txt
     -  data type mutated the points[] array
     -  data type should have no side effects unless documented in API
  *  equidistant.txt
     -  data type mutated the points[] array
     -  data type should have no side effects unless documented in API
==> FAILED

Test 12: numberOfSegments() is consistent with segments()
  *  filename = input8.txt
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
  *  filename = horizontal5.txt
  *  filename = vertical5.txt
  *  filename = random23.txt
==> passed

Test 13: Throws exception either if argument to constructor is null
         or if any entry in array is null
  *  argument is null
  *  Point[] of length 10, number of null entries = 1
  *  Point[] of length 10, number of null entries = 10
  *  Point[] of length 4, number of null entries = 1
  *  Point[] of length 3, number of null entries = 1
  *  Point[] of length 2, number of null entries = 1
  *  Point[] of length 1, number of null entries = 1
==> passed

Test 14: Check that the constructor throws an exception if duplicate points
  *  50 points
  *  25 points
  *  5 points
  *  4 points
  *  3 points
  *  2 points
==> passed


Total: 15/17 tests passed!


================================================================

Testing methods in FastCollinearPoints
*-----------------------------------------------------------
Running 21 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - all x- and y-coordinates between 0 and 32,767

Test 1: Points from a file
  *  filename = input8.txt
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
  *  filename = input299.txt
==> passed

Test 2a: Points from a file with horizontal line segments
  *  filename = horizontal5.txt
  *  filename = horizontal25.txt
  *  filename = horizontal50.txt
  *  filename = horizontal75.txt
  *  filename = horizontal100.txt
==> passed

Test 2b: Random horizontal line segments
  *   1 random horizontal line segment
  *   5 random horizontal line segments
  *  10 random horizontal line segments
  *  15 random horizontal line segments
==> passed

Test 3a: Points from a file with vertical line segments
  *  filename = vertical5.txt
  *  filename = vertical25.txt
  *  filename = vertical50.txt
  *  filename = vertical75.txt
  *  filename = vertical100.txt
==> passed

Test 3b: Random vertical line segments
  *   1 random vertical line segment
  *   5 random vertical line segments
  *  10 random vertical line segments
  *  15 random vertical line segments
==> passed

Test 4a: Points from a file with no line segments
  *  filename = random23.txt
  *  filename = random38.txt
  *  filename = random91.txt
  *  filename = random152.txt
==> passed

Test 4b: Random points with no line segments
  *   5 random points
  *  10 random points
  *  20 random points
  *  50 random points
==> passed

Test 5a: Points from a file with 5 or more on some line segments
  *  filename = input9.txt
  *  filename = input10.txt
  *  filename = input20.txt
  *  filename = input50.txt
  *  filename = input80.txt
     -  student   solution has 29 non-null entries
     -  reference solution has 31 non-null entries
     -  2 missing entries in student solution, including: (26000, 13000) -> (26000, 16000) -> (26000, 22000) -> (26000, 23000)

  *  filename = input300.txt
  *  filename = inarow.txt
==> FAILED

Test 5b: Points from a file with 5 or more on some line segments
  *  filename = kw1260.txt
  *  filename = rs1423.txt
==> passed

Test 6: Points from a file with fewer than 4 points
  *  filename = input1.txt
  *  filename = input2.txt
  *  filename = input3.txt
==> passed

Test 7: Check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
  *  filename = input299.txt
==> passed

Test 8: Check for fragile dependence on return value of toString()
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
==> passed

Test 9: Random line segments, none vertical or horizontal
  *   1 random line segment
  *   5 random line segments
  *  25 random line segments
  *  50 random line segments
  *  100 random line segments
==> passed

Test 10: Random line segments
  *   1 random line segment
  *   5 random line segments
  *  25 random line segments
  *  50 random line segments
  *  100 random line segments
==> passed

Test 11: Random distinct points in a given range
  *  5 random points in a 10-by-10 grid
  *  10 random points in a 10-by-10 grid
  *  50 random points in a 10-by-10 grid
     -  student   solution has 27 non-null entries
     -  reference solution has 37 non-null entries
     -  10 missing entries in student solution, including: (1, 4) -> (3, 6) -> (4, 7) -> (5, 8)

     -  failed on trial 1 of 100

  *  90 random points in a 10-by-10 grid
     -  student   solution has 83 non-null entries
     -  reference solution has 132 non-null entries
     -  49 missing entries in student solution, including: (1, 6) -> (3, 7) -> (5, 8) -> (7, 9)

     -  failed on trial 1 of 50

  *  200 random points in a 50-by-50 grid
     -  student   solution has 167 non-null entries
     -  reference solution has 231 non-null entries
     -  64 missing entries in student solution, including: (8, 41) -> (12, 42) -> (20, 44) -> (28, 46)

     -  failed on trial 1 of 10

==> FAILED

Test 12: M*N points on an M-by-N grid
  *  3-by-3 grid
  *  4-by-4 grid
     -  student   solution has 8 non-null entries
     -  reference solution has 10 non-null entries
     -  2 missing entries in student solution, including: (2, 0) -> (2, 1) -> (2, 2) -> (2, 3)

  *  5-by-5 grid
     -  student   solution has 14 non-null entries
     -  reference solution has 16 non-null entries
     -  2 missing entries in student solution, including: (4, 0) -> (4, 1) -> (4, 2) -> (4, 3) -> (4, 4)

  *  10-by-10 grid
     -  student   solution has 82 non-null entries
     -  reference solution has 154 non-null entries
     -  72 missing entries in student solution, including: (9, 6) -> (7, 7) -> (5, 8) -> (3, 9)

  *  20-by-20 grid
     java.lang.ArrayIndexOutOfBoundsException: 400

     FastCollinearPoints.<init>(FastCollinearPoints.java:73)
     TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:110)
     TestFastCollinearPoints.grid(TestFastCollinearPoints.java:450)
     TestFastCollinearPoints.test12(TestFastCollinearPoints.java:459)
     TestFastCollinearPoints.main(TestFastCollinearPoints.java:815)

  *  5-by-4 grid
     -  student   solution has 10 non-null entries
     -  reference solution has 13 non-null entries
     -  3 missing entries in student solution, including: (2, 0) -> (2, 1) -> (2, 2) -> (2, 3)

  *  6-by-4 grid
     -  student   solution has 11 non-null entries
     -  reference solution has 16 non-null entries
     -  5 missing entries in student solution, including: (5, 0) -> (5, 1) -> (5, 2) -> (5, 3)

  *  10-by-4 grid
     -  student   solution has 22 non-null entries
     -  reference solution has 38 non-null entries
     -  16 missing entries in student solution, including: (8, 0) -> (6, 1) -> (4, 2) -> (2, 3)

  *  15-by-4 grid
     -  student   solution has 34 non-null entries
     -  reference solution has 79 non-null entries
     -  45 missing entries in student solution, including: (14, 0) -> (14, 1) -> (14, 2) -> (14, 3)

  *  25-by-4 grid
     -  student   solution has 72 non-null entries
     -  reference solution has 213 non-null entries
     -  141 missing entries in student solution, including: (24, 0) -> (24, 1) -> (24, 2) -> (24, 3)

==> FAILED

Test 13: Check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  *  input8.txt
     -  failed after 8 operations involving FastCollinearPoints
     -  first and last call to segments() returned different arrays
     -  sequence of operations was:
          FastCollinearPoints collinear = new FastCollinearPoints(points);
          collinear.numberOfSegments() -> 2
          collinear.numberOfSegments() -> 2
          collinear.numberOfSegments() -> 2
          collinear.numberOfSegments() -> 2
          collinear.segments()
          mutate array returned by last call to segments()
          collinear.segments()
     -  failed on trial 1 of 100

  *  equidistant.txt
     -  failed after 15 operations involving FastCollinearPoints
     -  first and last call to segments() returned different arrays
     -  sequence of operations was:
          FastCollinearPoints collinear = new FastCollinearPoints(points);
          collinear.numberOfSegments() -> 4
          collinear.numberOfSegments() -> 4
          mutate points[] array that was passed to constructor
          collinear.segments()
          mutate points[] array that was passed to constructor
          mutate points[] array that was passed to constructor
          collinear.segments()
          mutate points[] array that was passed to constructor
          collinear.segments()
          collinear.segments()
          collinear.numberOfSegments() -> 4
          mutate array returned by last call to segments()
          collinear.numberOfSegments() -> 4
          collinear.segments()
     -  failed on trial 1 of 100

==> FAILED

Test 14: Check that data type does not mutate the constructor argument
  *  input8.txt
  *  equidistant.txt
==> passed

Test 15: numberOfSegments() is consistent with segments()
  *  filename = input8.txt
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
  *  filename = horizontal5.txt
  *  filename = vertical5.txt
  *  filename = random23.txt
==> passed

Test 16: Throws exception either if argument to constructor is null
         or if any entry in array is null
  *  argument is null
  *  Point[] of length 10, number of null entries = 1
  *  Point[] of length 10, number of null entries = 10
  *  Point[] of length 4, number of null entries = 1
  *  Point[] of length 3, number of null entries = 1
  *  Point[] of length 2, number of null entries = 1
  *  Point[] of length 1, number of null entries = 1
==> passed

Test 17: Check that the constructor throws an exception if duplicate points
  *  50 points
  *  25 points
  *  5 points
  *  4 points
  *  3 points
  *  2 points
==> passed


Total: 17/21 tests passed!


================================================================

******************************************************************************
*          MEMORY
******************************************************************************

Computing memory of Point
*-----------------------------------------------------------
Running 1 total tests.

The maximum amount of memory per Point object is 32 bytes.

Student memory = 24 bytes (passed)

Total: 1/1 tests passed!

================================================================



******************************************************************************
*          TIMING
******************************************************************************

Timing BruteCollinearPoints
*-----------------------------------------------------------
Running 10 total tests.

Test 1a-1e: Find collinear points among N random distinct points


                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    16   0.01         680           0            680                 1284         
=> passed    32   0.00        5456           0           5456                10536         
=> passed    64   0.01       43680           0          43680                85651         
=> passed   128   0.02      349504           0         349504               691618         
=> passed   256   0.08     2796160           0        2796160              5561414         
==> 5/5 tests passed

Test 2a-2e: Find collinear points among N/4 arbitrary line segments


                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    16   0.00         754           0            754                 1376         
=> passed    32   0.00        5710           0           5710                10874         
=> passed    64   0.00       44674           0          44674                87038         
=> passed   128   0.01      353674           0         353674               697638         
=> passed   256   0.09     2812040           0        2812040              5584597         
==> 5/5 tests passed

Total: 10/10 tests passed!

================================================================



Timing FastCollinearPoints
*-----------------------------------------------------------
Running 31 total tests.

Test 1a-1g: Find collinear points among N random distinct points


                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.02       12160       19676          51512                    0         
=> passed   128   0.01       48896       94600         238096                    0         
=> passed   256   0.06      196096      442571        1081238                    0         
=> passed   512   0.21      785408     2030213        4845834                    9         
=> passed  1024   0.27     3143680     9181408       21506496                   10         
=> passed  2048   1.03    12578816    40910479       94399774                  113         
==> 6/6 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (94399774 / 21506496) = 2.13
=> passed

==> 7/7 tests passed

Test 2a-2g: Find collinear points among the N points on an N-by-1 grid

                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.00        8317        4764          17845                  122         
=> passed   128   0.00       33021       17796          68613                  250         
=> passed   256   0.00      131581       68717         269015                  503         
=> passed   512   0.02      525309      269399        1064107                 1014         
=> passed  1024   0.06     2099197     1065026        4229249                 2045         
=> passed  2048   0.10     8392701     4231214       16855129                 4086         
=> passed  4096   0.39    33562621    16859163       67280947                 8182         
==> 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (67280947 / 16855129) = 2.00
=> passed

==> 8/8 tests passed

Test 3a-3g: Find collinear points among the N points on an N/4-by-4 grid

                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.00       21877       19625          61127                  378         
=> passed   128   0.01       96184       93311         282806                  828         
     java.lang.ArrayIndexOutOfBoundsException: 256

     FastCollinearPoints.<init>(FastCollinearPoints.java:73)
     TimeFastCollinearPoints.timingTest(TimeFastCollinearPoints.java:93)
     TimeFastCollinearPoints.time(TimeFastCollinearPoints.java:235)
     TimeFastCollinearPoints.timeGrid4(TimeFastCollinearPoints.java:181)
     TimeFastCollinearPoints.main(TimeFastCollinearPoints.java:293)

Test 4a-4g: Find collinear points among the N points on an N/8-by-8 grid

                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.00       24045       19492          63029                  503         
=> passed   128   0.01      112492       94241         300974                 1084         
=> passed   256   0.03      583138      442339        1467816                 2851         
     java.lang.ArrayIndexOutOfBoundsException: 512

     FastCollinearPoints.<init>(FastCollinearPoints.java:73)
     TimeFastCollinearPoints.timingTest(TimeFastCollinearPoints.java:93)
     TimeFastCollinearPoints.time(TimeFastCollinearPoints.java:235)
     TimeFastCollinearPoints.timeGrid8(TimeFastCollinearPoints.java:206)
     TimeFastCollinearPoints.main(TimeFastCollinearPoints.java:297)

Total: 20/31 tests passed!

================================================================